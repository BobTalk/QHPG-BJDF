{
  "_args": [
    [
      {
        "raw": "ssf@~0.9.3",
        "scope": null,
        "escapedName": "ssf",
        "name": "ssf",
        "rawSpec": "~0.9.3",
        "spec": ">=0.9.3 <0.10.0",
        "type": "range"
      },
      "D:\\axyr\\code2017\\QHPG-BJDF\\node_modules\\xlsx"
    ]
  ],
  "_from": "ssf@>=0.9.3 <0.10.0",
  "_id": "ssf@0.9.3",
  "_inCache": true,
  "_location": "/ssf",
  "_nodeVersion": "7.9.0",
  "_npmOperationalInternal": {
    "host": "packages-12-west.internal.npmjs.com",
    "tmp": "tmp/ssf-0.9.3.tgz_1494964226468_0.6785808934364468"
  },
  "_npmUser": {
    "name": "sheetjs",
    "email": "dev@sheetjs.com"
  },
  "_npmVersion": "4.5.0",
  "_phantomChildren": {},
  "_requested": {
    "raw": "ssf@~0.9.3",
    "scope": null,
    "escapedName": "ssf",
    "name": "ssf",
    "rawSpec": "~0.9.3",
    "spec": ">=0.9.3 <0.10.0",
    "type": "range"
  },
  "_requiredBy": [
    "/xlsx"
  ],
  "_resolved": "https://registry.npmjs.org/ssf/-/ssf-0.9.3.tgz",
  "_shasum": "42da2bdf99fcbde1b62b3ca58f00aa1f097a764e",
  "_shrinkwrap": null,
  "_spec": "ssf@~0.9.3",
  "_where": "D:\\axyr\\code2017\\QHPG-BJDF\\node_modules\\xlsx",
  "author": {
    "name": "SheetJS"
  },
  "bin": {
    "ssf": "./bin/ssf.njs"
  },
  "bugs": {
    "url": "https://github.com/SheetJS/ssf/issues"
  },
  "config": {
    "blanket": {
      "pattern": "ssf.js"
    }
  },
  "dependencies": {
    "colors": "0.6.2",
    "frac": "~1.0.6",
    "voc": ""
  },
  "description": "Format data using ECMA-376 spreadsheet Format Codes",
  "devDependencies": {
    "@sheetjs/uglify-js": "",
    "mocha": ""
  },
  "directories": {},
  "dist": {
    "shasum": "42da2bdf99fcbde1b62b3ca58f00aa1f097a764e",
    "tarball": "https://registry.npmjs.org/ssf/-/ssf-0.9.3.tgz"
  },
  "engines": {
    "node": ">=0.8"
  },
  "gitHead": "5bcd966b227c1ab3ff23b3b118586759c19c0629",
  "homepage": "https://oss.sheetjs.com/ssf",
  "keywords": [
    "format",
    "sprintf",
    "spreadsheet"
  ],
  "license": "Apache-2.0",
  "main": "./ssf",
  "maintainers": [
    {
      "name": "sheetjs",
      "email": "sheetjs@gmail.com"
    }
  ],
  "name": "ssf",
  "optionalDependencies": {},
  "readme": "# [SheetJS SSF](http://sheetjs.com)\n\nssf (SpreadSheet Format) is a pure-JS library to format data using ECMA-376\nspreadsheet format codes (used in popular spreadsheet software packages).\n\n\n## Installation\n\nWith [npm](https://www.npmjs.org/package/ssf):\n\n```bash\n$ npm install ssf\n```\n\nIn the browser:\n\n```html\n<script src=\"ssf.js\"></script>\n```\n\nThe browser exposes a variable `SSF`\n\nWhen installed globally, npm installs a script `ssf` that renders the format\nstring with the given arguments.  Running the script with `-h` displays help.\n\nThe script will manipulate `module.exports` if available (e.g. in a CommonJS\n`require` context).  This is not always desirable.  To prevent the behavior,\ndefine `DO_NOT_EXPORT_SSF`.\n\n## Usage\n\n`SSF.format(fmt, val, opts)` formats `val` using the format `fmt`.  If `fmt` is\na string, it will be parsed and evaluated.  If `fmt` is a `number`, the actual\nformat will be the corresponding entry in the internal format table.\n\n### Manipulating the Internal Format Table\n\nBinary spreadsheet formats store cell formats in a table and reference by index.\nThis library uses a global table:\n\n`SSF._table` is the underlying object, mapping numeric keys to format strings.\n\n`SSF.load(fmt:string, idx:?number):number` assigns the format to the specified\nindex and returns the index.  If the index is not specified, SSF will search the\nspace for an available format slot pick an unused slot.  For compatibility with\nthe XLS and XLSB file formats, custom indices should be in the valid ranges\n`5-8`, `23-26`, `41-44`, `63-66`, `164-382` (see `[MS-XLSB] 2.4.655 BrtFmt`)\n\n`SSF.get_table()` gets the internal format table (number to format mapping).\n\n`SSF.load_table(table)` sets the internal format table.\n\n### Other Utilities\n\n`SSF.parse_date_code(val:number, opts:?any)` parses `val`, returning an object:\n\n```typescript\ntype SSFDate = {\n  D:number; /* number of whole days since relevant epoch, 0 <= D */\n  y:number; /* integral year portion, epoch_year <= y */\n  m:number; /* integral month portion, 1 <= m <= 12 */\n  d:number; /* integral day portion, subject to gregorian YMD constraints */\n  q:number; /* integral day of week (0=Sunday .. 6=Saturday) 0 <= q <= 6 */\n\n  T:number; /* number of seconds since midnight, 0 <= T < 86400 */\n  H:number; /* integral number of hours since midnight, 0 <= H < 24 */\n  M:number; /* integral number of minutes since the last hour, 0 <= M < 60 */\n  S:number; /* integral number of seconds since the last minute, 0 <= S < 60 */\n  u:number; /* sub-second part of time, 0 <= u < 1 */\n}\n```\n\n`SSF.is_date(fmt:string):boolean` returns `true` if `fmt` encodes a date format.\n\n## License\n\nPlease consult the attached LICENSE file for details.  All rights not explicitly\ngranted by the Apache 2.0 license are reserved by the Original Author.\n\n## References\n\n- [ECMA-376] Office Open XML File Formats\n- [MS-XLSB] Excel (.xlsb) Binary File Format\n\n## Badges\n\n[![Sauce Test Status](https://saucelabs.com/browser-matrix/ssfjs.svg)](https://saucelabs.com/u/ssfjs)\n\n[![Build Status](https://travis-ci.org/SheetJS/ssf.svg?branch=master)](https://travis-ci.org/SheetJS/ssf)\n\n[![Coverage Status](http://img.shields.io/coveralls/SheetJS/ssf/master.svg)](https://coveralls.io/r/SheetJS/ssf?branch=master)\n\n[![NPM Downloads](https://img.shields.io/npm/dt/ssf.svg)](https://npmjs.org/package/ssf)\n\n[![Dependencies Status](https://david-dm.org/sheetjs/ssf/status.svg)](https://david-dm.org/sheetjs/ssf)\n\n[![ghit.me](https://ghit.me/badge.svg?repo=sheetjs/js-xlsx)](https://ghit.me/repo/sheetjs/js-xlsx)\n\n[![Analytics](https://ga-beacon.appspot.com/UA-36810333-1/SheetJS/ssf?pixel)](https://github.com/SheetJS/ssf)\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/SheetJS/ssf.git"
  },
  "scripts": {
    "test": "make test"
  },
  "version": "0.9.3"
}
